varying vec3 lightDir;
varying vec3 normal;
varying vec3 vN;
varying vec3 v;

uniform sampler2D tex;

#define MAX_LIGHTS 1

void main()
{
    vec3 ct,cf;
    vec4 texel;
    float intensity,at,af;
    intensity = 1.0; //max(dot(lightDir,normalize(normal)),0.0);

    cf = intensity * (gl_FrontMaterial.diffuse).rgb +
                  gl_FrontMaterial.ambient.rgb;
    af = gl_FrontMaterial.diffuse.a;
    texel = texture2D(tex,gl_TexCoord[0].st);

    ct = texel.rgb * gl_Color.rgb;
    at = texel.a;
    vec4 finalColor = vec4(ct * cf, at * af);
    vec4 ambColor = finalColor * 0.4;

/*
    finalColor.r *= 0.5;
    finalColor.g *= 0.5;
    finalColor.b *= 0.5;
  */
   vec3 N = vN; //normalize(vN);

   for (int i=0;i<MAX_LIGHTS;i++)
   {
      vec3 p = (gl_ModelViewMatrix * gl_LightSource[i].position).xyz;
      //vec3 L = normalize(gl_LightSource[i].position.xyz - v);
      vec3 L = normalize(p - v);
      vec3 E = normalize(-v); // we are in Eye Coordinates, so EyePos is (0,0,0)
      vec3 R = normalize(-reflect(L,N));

      //calculate Ambient Term:
      vec4 Iamb = gl_FrontLightProduct[i].ambient;
      //calculate Diffuse Term:
      vec4 Idiff = gl_FrontLightProduct[i].diffuse * max(dot(N,L), 0.0);
      Idiff = clamp(Idiff, 0.0, 1.0);

      // calculate Specular Term:
      vec4 Ispec = gl_FrontLightProduct[i].specular
             * pow(max(dot(R,E),0.0),0.3*gl_FrontMaterial.shininess);
      Ispec = clamp(Ispec, 0.0, 1.0);

      finalColor *= Iamb + Idiff + Ispec;
   }

   finalColor = ambColor + finalColor;

   // write Total Color:
   gl_FragColor = gl_FrontLightModelProduct.sceneColor + finalColor;


}
